import express from 'express';
import { BrowserManager } from './core/browser';
import { MapParser } from './parsers/mapParser';
import { CacheManager } from './core/cacheManager';
import { DEFAULT_CONFIG } from './config/defaults';
import { logger } from './utils/logger';
import { MapData } from './types';
import * as path from 'path';
import * as fs from 'fs-extra';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let browserManager: BrowserManager | null = null;
let mapParser: MapParser | null = null;
let cacheManager: CacheManager | null = null;
let allMaps: MapData[] = [];
let isInitialized = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function initializeComponents() {
  if (isInitialized) return;
  
  try {
    logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    browserManager = new BrowserManager();
    await browserManager.initialize();
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    mapParser = new MapParser(browserManager, DEFAULT_CONFIG.baseUrl);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä
    cacheManager = new CacheManager('./output');
    await cacheManager.initialize();
    
    isInitialized = true;
    logger.success('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error as Error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
async function loadMaps(): Promise<MapData[]> {
  if (!mapParser || !cacheManager) {
    throw new Error('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
    const cachedMaps = cacheManager.getAllDiscoveredMaps();
    
    if (cachedMaps.length > 0) {
      logger.info(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cachedMaps.length} –∫–∞—Ä—Ç –∏–∑ –∫–µ—à–∞`);
      return cachedMaps;
    }
    
    // –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç, –ø–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
    logger.info('üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç —Å rustmaps.ru...');
    const newMaps = await mapParser.parseMainPage();
    
    if (newMaps.length > 0) {
      await cacheManager.updateDiscoveredMaps(newMaps);
      logger.success(`‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ ${newMaps.length} –∫–∞—Ä—Ç`);
    }
    
    return newMaps;
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error as Error);
    return [];
  }
}

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã
app.get('/api/maps', async (req, res) => {
  try {
    await initializeComponents();
    
    if (allMaps.length === 0) {
      allMaps = await loadMaps();
    }
    
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 20;
    const search = req.query.search as string || '';
    
    let filteredMaps = allMaps;
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (search) {
      filteredMaps = allMaps.filter(map => 
        map.title.toLowerCase().includes(search.toLowerCase()) ||
        map.description.toLowerCase().includes(search.toLowerCase()) ||
        (map.tags && map.tags.some(tag => tag.toLowerCase().includes(search.toLowerCase())))
      );
    }
    
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedMaps = filteredMaps.slice(startIndex, endIndex);
    
    res.json({
      maps: paginatedMaps,
      total: filteredMaps.length,
      page,
      limit,
      totalPages: Math.ceil(filteredMaps.length / limit)
    });
    
  } catch (error) {
    logger.error('API Error:', error as Error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
app.get('/api/maps/:id', async (req, res) => {
  try {
    await initializeComponents();
    
    const mapId = req.params.id;
    let map = allMaps.find(m => m.mid === mapId);
    
    if (!map) {
      res.status(404).json({ error: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }
    
    // –ï—Å–ª–∏ —É –∫–∞—Ä—Ç—ã –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –µ—ë
    if (!map.mapFiles || map.mapFiles.length === 0) {
      if (mapParser) {
        map = await mapParser.getDetailedMapInfo(map);
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ
        const index = allMaps.findIndex(m => m.mid === mapId);
        if (index !== -1) {
          allMaps[index] = map;
        }
      }
    }
    
    res.json(map);
    
  } catch (error) {
    logger.error('API Error:', error as Error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
app.post('/api/refresh', async (req, res) => {
  try {
    await initializeComponents();
    
    logger.info('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç...');
    allMaps = await loadMaps();
    
    res.json({ 
      success: true, 
      count: allMaps.length,
      message: '–ö–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã' 
    });
    
  } catch (error) {
    logger.error('API Error:', error as Error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç' });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', async (req, res) => {
  try {
    await initializeComponents();
    
    if (!cacheManager) {
      res.status(500).json({ error: '–ö–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }
    
    const stats = cacheManager.getStats();
    
    res.json({
      totalMaps: allMaps.length,
      ...stats
    });
    
  } catch (error) {
    logger.error('API Error:', error as Error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
process.on('SIGINT', async () => {
  logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (browserManager) {
    await browserManager.close();
  }
  
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (browserManager) {
    await browserManager.close();
  }
  
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  logger.success(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
  logger.info('üìñ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É');
});

